#!/usr/bin/env python3
"""
COMPLETE CORRUPTION CATALOG
All corruption types implemented for dirty data testing
"""

print("üß™ COMPLETE CORRUPTION CATALOG - ALL IMPLEMENTED TYPES")
print("=" * 60)

# Original Address-focused Corruptions (24 types)
print("\\nüìç ORIGINAL ADDRESS CORRUPTIONS (24 types)")
print("=" * 45)

original_corruptions = [
    {
        'name': 'no_change',
        'category': 'Control',
        'description': 'No corruption applied',
        'example': 'Same ‚Üí Same',
        'frequency': 'High (13.5%)'
    },
    {
        'name': 'uppercase',
        'category': 'Case Changes',
        'description': 'Convert to UPPERCASE',
        'example': 'London ‚Üí LONDON',
        'frequency': 'Medium (3.1%)'
    },
    {
        'name': 'lowercase', 
        'category': 'Case Changes',
        'description': 'Convert to lowercase',
        'example': 'London ‚Üí london',
        'frequency': 'Medium (4.2%)'
    },
    {
        'name': 'title_case',
        'category': 'Case Changes',
        'description': 'Convert To Title Case',
        'example': 'london SW1A ‚Üí London Sw1a',
        'frequency': 'Medium (4.5%)'
    },
    {
        'name': 'extra_spaces',
        'category': 'Spacing',
        'description': 'Add spaces at start/end',
        'example': 'Address ‚Üí " Address "',
        'frequency': 'Medium (4.3%)'
    },
    {
        'name': 'spaced_commas',
        'category': 'Spacing',
        'description': 'Add spaces around commas',
        'example': 'A,B ‚Üí A , B',
        'frequency': 'Medium (3.2%)'
    },
    {
        'name': 'normalized_spaces',
        'category': 'Spacing',
        'description': 'Remove double spaces',
        'example': 'A  B ‚Üí A B',
        'frequency': 'Medium (4.3%)'
    },
    {
        'name': 'removed_commas',
        'category': 'Spacing',
        'description': 'Remove all commas',
        'example': 'A, B, C ‚Üí A B C',
        'frequency': 'Medium (3.2%)'
    },
    {
        'name': 'number_change',
        'category': 'Numeric',
        'description': 'Change house numbers by ¬±1-3',
        'example': '123 ‚Üí 126',
        'frequency': 'Medium (4.8%)'
    },
    {
        'name': 'street_abbreviation',
        'category': 'Abbreviations',
        'description': 'Street ‚Üí St',
        'example': 'High Street ‚Üí High St',
        'frequency': 'Medium (4.8%)'
    },
    {
        'name': 'road_abbreviation',
        'category': 'Abbreviations', 
        'description': 'Road ‚Üí Rd',
        'example': 'High Road ‚Üí High Rd',
        'frequency': 'Medium (3.2%)'
    },
    {
        'name': 'avenue_abbreviation',
        'category': 'Abbreviations',
        'description': 'Avenue ‚Üí Ave',
        'example': 'Park Avenue ‚Üí Park Ave',
        'frequency': 'Medium (3.5%)'
    },
    {
        'name': 'street_expansion',
        'category': 'Expansions',
        'description': 'St ‚Üí Street',
        'example': 'High St ‚Üí High Street',
        'frequency': 'Medium (3.1%)'
    },
    {
        'name': 'road_expansion',
        'category': 'Expansions',
        'description': 'Rd ‚Üí Road',
        'example': 'High Rd ‚Üí High Road',
        'frequency': 'Medium (3.4%)'
    },
    {
        'name': 'postcode_no_space',
        'category': 'Postcode',
        'description': 'Remove postcode space',
        'example': 'SW1A 1AA ‚Üí SW1A1AA',
        'frequency': 'Medium (4.3%)'
    },
    {
        'name': 'postcode_add_space',
        'category': 'Postcode',
        'description': 'Add postcode space',
        'example': 'SW1A1AA ‚Üí SW1A 1AA',
        'frequency': 'Medium (3.2%)'
    },
    {
        'name': 'O_to_0',
        'category': 'OCR Errors',
        'description': 'Letter O ‚Üí digit 0',
        'example': 'OX1 ‚Üí 0X1',
        'frequency': 'Low (2.2%)'
    },
    {
        'name': '0_to_O',
        'category': 'OCR Errors',
        'description': 'Digit 0 ‚Üí letter O',
        'example': 'SW10 ‚Üí SW1O',
        'frequency': 'Medium (3.2%)'
    },
    {
        'name': 'I_to_1',
        'category': 'OCR Errors',
        'description': 'Letter I ‚Üí digit 1',
        'example': 'SW1I ‚Üí SW11',
        'frequency': 'High (5.4%)'
    },
    {
        'name': '1_to_I',
        'category': 'OCR Errors',
        'description': 'Digit 1 ‚Üí letter I',
        'example': '123 ‚Üí I23',
        'frequency': 'Medium (3.4%)'
    },
    {
        'name': 'remove_last_part',
        'category': 'Truncation',
        'description': 'Remove final comma part',
        'example': 'A, B, C ‚Üí A, B',
        'frequency': 'Medium (3.2%)'
    },
    {
        'name': 'add_england',
        'category': 'Additions',
        'description': 'Add ", England"',
        'example': 'London, UK ‚Üí London, UK, England',
        'frequency': 'Medium (3.8%)'
    },
    {
        'name': 'expand_uk',
        'category': 'Country',
        'description': 'UK ‚Üí United Kingdom',
        'example': 'London, UK ‚Üí London, United Kingdom',
        'frequency': 'Medium (5.1%)'
    },
    {
        'name': 'abbreviate_uk',
        'category': 'Country',
        'description': 'United Kingdom ‚Üí UK',
        'example': 'London, United Kingdom ‚Üí London, UK',
        'frequency': 'Medium (3.1%)'
    }
]

# Enhanced Field-Specific Corruptions (60+ types)  
print("\\nüéØ NEW FIELD-SPECIFIC CORRUPTIONS (60+ types)")
print("=" * 50)

enhanced_corruptions = [
    {
        'field': 'Place Names',
        'types': [
            'London ‚Üí Londan, Londin, Londn',
            'Manchester ‚Üí Machester, Manchestor',  
            'Birmingham ‚Üí Birmingam, Burmingham',
            'Liverpool ‚Üí Liverpol, Liverpul',
            'Edinburgh ‚Üí Edinburg, Edinborough',
            'Glasgow ‚Üí Glasgo, Glascow',
            'Cardiff ‚Üí Cardif, Carrdiff',
            'Belfast ‚Üí Belast, Belfest',
            'Newcastle ‚Üí Newcastel, New Castle',
            'Leeds ‚Üí Leds, Leedes',
            'Sheffield ‚Üí Shefield, Sheffild', 
            'Bristol ‚Üí Bristal, Bristoll',
            '+ 15 more major UK cities/areas'
        ],
        'coverage': '17.2% of dirty records',
        'impact': 'Tests location name recognition resilience'
    },
    {
        'field': 'Card Numbers (PAN)',
        'types': [
            'Alpha chars: 1234 ‚Üí 123O, 123l, 123I',
            'Truncation: 1234567890123456 ‚Üí 123456789012345',
            'Extra digits: 1234567890123456 ‚Üí 12345678901234569',
            'Formatting: 1234567890123456 ‚Üí 1234 5678 9012 3456',
            'Hyphens: 1234567890123456 ‚Üí 1234-5678-9012-3456',
            'OCR errors: 1234567890123456 ‚Üí I234567890I23456',
            'Missing zeros: 0123456789012345 ‚Üí 123456789012345'
        ],
        'coverage': '100% of dirty records',
        'impact': 'Tests financial data validation'
    },
    {
        'field': 'Personal Names',
        'types': [
            'Common misspellings: John ‚Üí Jon, Jhon',
            'Michael ‚Üí Micheal, Mikael',
            'David ‚Üí Davd, Daivd',
            'James ‚Üí Jmes, Jamies',
            'Sarah ‚Üí Sara, Sarrah',
            'Jennifer ‚Üí Jenifer, Jeniffer',
            'Doubled letters: Amy ‚Üí Ammy',
            'Missing letters: Robert ‚Üí Robrt',
            'Swapped letters: Mark ‚Üí Mrak',
            'i/y substitution: Emily ‚Üí Emyly',
            'ph/f substitution: Christopher ‚Üí Cristopher',
            '+ 50+ common name variations'
        ],
        'coverage': '83.5% of dirty records', 
        'impact': 'Tests name recognition flexibility'
    },
    {
        'field': 'Email Domains',
        'types': [
            'gmail.com ‚Üí gmai.com, gmial.com',
            'yahoo.com ‚Üí yaho.com, yahooo.com',
            'hotmail.com ‚Üí hotmai.com, htomail.com',
            'outlook.com ‚Üí outlok.com, outloook.com',
            '.com ‚Üí .co (missing m)',
            '.com ‚Üí .cm (missing o)',
            'Missing dot: domain.com ‚Üí domaincom',
            'Wrong TLD: .co.uk ‚Üí .com'
        ],
        'coverage': '74.6% of dirty records',
        'impact': 'Tests email validation robustness'
    },
    {
        'field': 'Phone Numbers',
        'types': [
            'Wrong country code: +44 ‚Üí +441',
            'Duplicate: +447123456789 ‚Üí +44+447123456789',
            'Missing country: +447123456789 ‚Üí 7123456789',
            'Truncation: 07123456789 ‚Üí 0712345678',
            'Extra digits: 07123456789 ‚Üí 071234567891',
            'Formatting: 07123456789 ‚Üí 07-123-456-789',
            'OCR: 07123456789 ‚Üí O7I23456789',
            'Spacing: 07123456789 ‚Üí 07 123 456 789'
        ],
        'coverage': '92.3% of dirty records',
        'impact': 'Tests phone number parsing flexibility'
    },
    {
        'field': 'Date Formats',
        'types': [
            'Separators: 12/03/1990 ‚Üí 12-03-1990',
            'No separators: 12/03/1990 ‚Üí 12031990',
            'Reversed: 12/03/1990 ‚Üí 1990/03/12',
            'Missing zeros: 02/03/1990 ‚Üí 2/3/1990',
            'Wrong format: DD/MM/YYYY ‚Üí MM/DD/YYYY',
            'Two-digit year: 12/03/1990 ‚Üí 12/03/90',
            'Dots: 12/03/1990 ‚Üí 12.03.1990'
        ],
        'coverage': '90.9% of dirty records',
        'impact': 'Tests date parsing robustness'
    },
    {
        'field': 'National Insurance Numbers',
        'types': [
            'No spaces: AB 12 34 56 C ‚Üí AB123456C',
            'Wrong spacing: AB123456C ‚Üí AB 12 3456 C',  
            'Missing suffix: AB123456C ‚Üí AB123456',
            'Case changes: AB123456C ‚Üí ab123456c',
            'OCR errors: AB123456C ‚Üí A8123456C',
            'Hyphens: AB 12 34 56 C ‚Üí AB-12-34-56-C'
        ],
        'coverage': '0% (not corrupted in current run)',
        'impact': 'Tests NINO format validation'
    }
]

# Display original corruptions by category
categories = {}
for corruption in original_corruptions:
    cat = corruption['category']
    if cat not in categories:
        categories[cat] = []
    categories[cat].append(corruption)

for category, items in categories.items():
    print(f"\\nüè∑Ô∏è {category.upper()}:")
    for item in items:
        print(f"  ‚Ä¢ {item['name']:<20}: {item['description']}")
        print(f"    Example: {item['example']}")
        print(f"    Frequency: {item['frequency']}")

# Display enhanced corruptions
print("\\n\\nüéØ ENHANCED FIELD-SPECIFIC CORRUPTIONS:")
print("=" * 45)

for corruption_set in enhanced_corruptions:
    print(f"\\nüîß {corruption_set['field'].upper()}:")
    print(f"   Coverage: {corruption_set['coverage']}")
    print(f"   Impact: {corruption_set['impact']}")
    print("   Types:")
    for corruption_type in corruption_set['types'][:5]:  # Show first 5
        print(f"     ‚Ä¢ {corruption_type}")
    if len(corruption_set['types']) > 5:
        print(f"     ‚Ä¢ ... and {len(corruption_set['types']) - 5} more types")

# Summary statistics
print(f"\\nüìä COMPREHENSIVE CORRUPTION STATISTICS:")
print("=" * 45)

total_original = len(original_corruptions)
total_enhanced_fields = len(enhanced_corruptions)
total_enhanced_types = sum(len(c['types']) for c in enhanced_corruptions)

print(f"üìç Original Address Corruptions:")
print(f"   ‚Ä¢ Total Types: {total_original}")
print(f"   ‚Ä¢ Categories: {len(categories)}")
print(f"   ‚Ä¢ Focus: Address formatting and structure")

print(f"\\nüéØ Enhanced Field-Specific Corruptions:")
print(f"   ‚Ä¢ Fields Covered: {total_enhanced_fields}")
print(f"   ‚Ä¢ Total Corruption Types: {total_enhanced_types}+")
print(f"   ‚Ä¢ Focus: Realistic data quality issues per field")

print(f"\\nüèÜ TOTAL CORRUPTION CAPABILITY:")
print(f"   ‚Ä¢ Combined Types: {total_original + total_enhanced_types}+ different corruptions")
print(f"   ‚Ä¢ Coverage: 8 different PII field types")
print(f"   ‚Ä¢ Tracking: Individual corruption type per field per record")
print(f"   ‚Ä¢ Realism: Based on real-world data quality issues")

print(f"\\nüí° CORRUPTION STRATEGY BENEFITS:")
print("=" * 35)
print("‚úÖ Simulates OCR scanning errors")
print("‚úÖ Models user input mistakes") 
print("‚úÖ Replicates system integration issues")
print("‚úÖ Tests format variation tolerance")
print("‚úÖ Validates parsing robustness")
print("‚úÖ Benchmarks detection accuracy")
print("‚úÖ Enables algorithmic comparison")
print("‚úÖ Provides quantitative corruption impact analysis")

print(f"\\nüéØ READY FOR PRODUCTION PII TESTING")
print("üîç Test suite capable of comprehensive corruption analysis")
print("üìä Granular tracking enables detailed performance metrics") 
print("üöÄ Realistic data quality simulation for robust validation")
